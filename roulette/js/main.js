// Generated by CoffeeScript 1.9.3
var Slot, parseUrlParam, shuffle;

shuffle = function(array) {
  var random;
  random = array.map(Math.random);
  return array.map(function(e, i) {
    return [i, e];
  }).sort(function(a, b) {
    return random[a[0]] - random[b[0]];
  }).map(function(e) {
    return e[1];
  });
};

parseUrlParam = function() {
  var arg, i, kv, pair;
  arg = {};
  pair = location.search.substring(1).split('&');
  i = 0;
  while (pair[i]) {
    kv = pair[i].split('=');
    arg[kv[0]] = kv[1];
    ++i;
  }
  return arg;
};

Slot = (function() {
  function Slot(symbols) {
    var i;
    this.symbols = symbols;
    this.state = 0;
    this.slotHtmlUnit = shuffle(this.symbols).map(function(_) {
      return "<div class='symbol'><p>" + _.name + "</p></div>";
    }).join('\n');
    this.slotHtml = [
      (function() {
        var j, results;
        results = [];
        for (i = j = 0; j < 2; i = ++j) {
          results.push(this.slotHtmlUnit);
        }
        return results;
      }).call(this)
    ].join('');
    $('#roulette-inner').html(this.slotHtml);
    this.unitHeight = 10 * 5.0;
  }

  Slot.prototype.stop = function($obj) {
    var count, marginTop, slideCount, time;
    if (this.state !== 2) {
      return;
    }
    slideCount = 10;
    time = 400 * slideCount;
    $obj.stop(true, true);
    marginTop = parseInt($obj.css("margin-top"), 10);
    marginTop -= this.unitHeight * slideCount;
    count = Math.floor(marginTop / this.unitHeight);
    marginTop = this.unitHeight * count;
    console.log(marginTop);
    return $obj.animate({
      "margin-top": marginTop + "px"
    }, {
      'duration': time,
      'easing': "easeOutElastic",
      'complete': (function(_this) {
        return function() {
          var i;
          marginTop = parseInt($obj.css("margin-top"), 10);
          _this.slotHtml = [
            (function() {
              var j, results;
              results = [];
              for (i = j = 0; j < 2; i = ++j) {
                results.push(this.slotHtmlUnit);
              }
              return results;
            }).call(_this)
          ].join('');
          $('#roulette-inner').html(_this.slotHtml);
          marginTop %= _this.unitHeight * _this.symbols.length;
          $obj.css('margin-top', marginTop + 'px');
          return _this.state = 0;
        };
      })(this)
    });
  };

  Slot.prototype.move = function($obj) {
    var count, marginTop, time;
    if (this.state !== 1) {
      return;
    }
    this.slotHtml += this.slotHtmlUnit;
    $('#roulette-inner').html(this.slotHtml);
    time = 25 * this.symbols.length;
    marginTop = parseInt($obj.css("margin-top"), 10);
    marginTop -= this.unitHeight * this.symbols.length;
    count = Math.floor(marginTop / this.unitHeight);
    marginTop = this.unitHeight * count;
    return $obj.animate({
      "margin-top": marginTop + "px"
    }, {
      'duration': time,
      'easing': "linear",
      'complete': (function(_this) {
        return function() {
          return _this.move($('#roulette-inner'));
        };
      })(this)
    });
  };

  Slot.prototype.push = function() {
    if (this.state === 0) {
      this.state = 1;
      return this.move($('#roulette-inner'));
    } else if (this.state === 1) {
      this.state = 2;
      return this.stop($('#roulette-inner'));
    }
  };

  return Slot;

})();

$(function() {
  var args, slot, teamIndex, teamList;
  args = parseUrlParam();
  slot = null;
  if ((args.team != null) && args.team !== 'all') {
    teamIndex = parseInt(args.team);
    slot = new Slot(data.team[teamIndex]);
  } else {
    teamList = Array.prototype.concat.apply([], data.team);
    slot = new Slot(teamList);
  }
  return $(document).keypress(function(e) {
    if (e.which === 13) {
      slot.push();
      return false;
    }
  });
});
